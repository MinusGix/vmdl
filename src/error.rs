use thiserror::Error;

#[non_exhaustive]
#[derive(Debug, Error)]
pub enum MdlError {
    #[error("io error while reading data: {0}")]
    IO(#[from] std::io::Error),
    #[error(transparent)]
    String(#[from] StringError),
    #[error("Malformed field found while parsing: {0:#}")]
    MalformedData(binrw::Error),
    #[error("referenced data is out of bounds")]
    OutOfBounds,
}

impl From<binrw::Error> for MdlError {
    fn from(e: binrw::Error) -> Self {
        use binrw::Error;

        // only a few error types should be generated by our code
        match e {
            Error::Io(e) => MdlError::IO(e),
            Error::Custom { err, .. } => {
                if err.is::<StringError>() {
                    MdlError::String(*err.downcast::<StringError>().unwrap())
                } else {
                    panic!("unexpected custom error")
                }
            }
            e => MdlError::MalformedData(e),
        }
    }
}

#[derive(Debug, Error)]
pub enum StringError {
    #[error(transparent)]
    NonUTF8(#[from] std::str::Utf8Error),
    #[error("String is not null-terminated")]
    NotNullTerminated,
}
